{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformReply = exports.pushAggregatehOptions = exports.transformArguments = exports.IS_READ_ONLY = exports.FIRST_KEY_INDEX = exports.AggregateGroupByReducers = exports.AggregateSteps = void 0;\n\nconst generic_transformers_1 = require(\"@redis/client/dist/lib/commands/generic-transformers\");\n\nconst _1 = require(\".\");\n\nvar AggregateSteps;\n\n(function (AggregateSteps) {\n  AggregateSteps[\"GROUPBY\"] = \"GROUPBY\";\n  AggregateSteps[\"SORTBY\"] = \"SORTBY\";\n  AggregateSteps[\"APPLY\"] = \"APPLY\";\n  AggregateSteps[\"LIMIT\"] = \"LIMIT\";\n  AggregateSteps[\"FILTER\"] = \"FILTER\";\n})(AggregateSteps = exports.AggregateSteps || (exports.AggregateSteps = {}));\n\nvar AggregateGroupByReducers;\n\n(function (AggregateGroupByReducers) {\n  AggregateGroupByReducers[\"COUNT\"] = \"COUNT\";\n  AggregateGroupByReducers[\"COUNT_DISTINCT\"] = \"COUNT_DISTINCT\";\n  AggregateGroupByReducers[\"COUNT_DISTINCTISH\"] = \"COUNT_DISTINCTISH\";\n  AggregateGroupByReducers[\"SUM\"] = \"SUM\";\n  AggregateGroupByReducers[\"MIN\"] = \"MIN\";\n  AggregateGroupByReducers[\"MAX\"] = \"MAX\";\n  AggregateGroupByReducers[\"AVG\"] = \"AVG\";\n  AggregateGroupByReducers[\"STDDEV\"] = \"STDDEV\";\n  AggregateGroupByReducers[\"QUANTILE\"] = \"QUANTILE\";\n  AggregateGroupByReducers[\"TOLIST\"] = \"TOLIST\";\n  AggregateGroupByReducers[\"TO_LIST\"] = \"TOLIST\";\n  AggregateGroupByReducers[\"FIRST_VALUE\"] = \"FIRST_VALUE\";\n  AggregateGroupByReducers[\"RANDOM_SAMPLE\"] = \"RANDOM_SAMPLE\";\n})(AggregateGroupByReducers = exports.AggregateGroupByReducers || (exports.AggregateGroupByReducers = {}));\n\nexports.FIRST_KEY_INDEX = 1;\nexports.IS_READ_ONLY = true;\n\nfunction transformArguments(index, query, options) {\n  return pushAggregatehOptions(['FT.AGGREGATE', index, query], options);\n}\n\nexports.transformArguments = transformArguments;\n\nfunction pushAggregatehOptions(args, options) {\n  if (options?.VERBATIM) {\n    args.push('VERBATIM');\n  }\n\n  if (options?.LOAD) {\n    args.push('LOAD');\n    (0, _1.pushArgumentsWithLength)(args, () => {\n      if (Array.isArray(options.LOAD)) {\n        for (const load of options.LOAD) {\n          pushLoadField(args, load);\n        }\n      } else {\n        pushLoadField(args, options.LOAD);\n      }\n    });\n  }\n\n  if (options?.STEPS) {\n    for (const step of options.STEPS) {\n      switch (step.type) {\n        case AggregateSteps.GROUPBY:\n          args.push('GROUPBY');\n\n          if (!step.properties) {\n            args.push('0');\n          } else {\n            (0, generic_transformers_1.pushVerdictArgument)(args, step.properties);\n          }\n\n          if (Array.isArray(step.REDUCE)) {\n            for (const reducer of step.REDUCE) {\n              pushGroupByReducer(args, reducer);\n            }\n          } else {\n            pushGroupByReducer(args, step.REDUCE);\n          }\n\n          break;\n\n        case AggregateSteps.SORTBY:\n          (0, _1.pushSortByArguments)(args, 'SORTBY', step.BY);\n\n          if (step.MAX) {\n            args.push('MAX', step.MAX.toString());\n          }\n\n          break;\n\n        case AggregateSteps.APPLY:\n          args.push('APPLY', step.expression, 'AS', step.AS);\n          break;\n\n        case AggregateSteps.LIMIT:\n          args.push('LIMIT', step.from.toString(), step.size.toString());\n          break;\n\n        case AggregateSteps.FILTER:\n          args.push('FILTER', step.expression);\n          break;\n      }\n    }\n  }\n\n  (0, _1.pushParamsArgs)(args, options?.PARAMS);\n\n  if (options?.DIALECT) {\n    args.push('DIALECT', options.DIALECT.toString());\n  }\n\n  return args;\n}\n\nexports.pushAggregatehOptions = pushAggregatehOptions;\n\nfunction pushLoadField(args, toLoad) {\n  if (typeof toLoad === 'string') {\n    args.push(toLoad);\n  } else {\n    args.push(toLoad.identifier);\n\n    if (toLoad.AS) {\n      args.push('AS', toLoad.AS);\n    }\n  }\n}\n\nfunction pushGroupByReducer(args, reducer) {\n  args.push('REDUCE', reducer.type);\n\n  switch (reducer.type) {\n    case AggregateGroupByReducers.COUNT:\n      args.push('0');\n      break;\n\n    case AggregateGroupByReducers.COUNT_DISTINCT:\n    case AggregateGroupByReducers.COUNT_DISTINCTISH:\n    case AggregateGroupByReducers.SUM:\n    case AggregateGroupByReducers.MIN:\n    case AggregateGroupByReducers.MAX:\n    case AggregateGroupByReducers.AVG:\n    case AggregateGroupByReducers.STDDEV:\n    case AggregateGroupByReducers.TOLIST:\n      args.push('1', reducer.property);\n      break;\n\n    case AggregateGroupByReducers.QUANTILE:\n      args.push('2', reducer.property, reducer.quantile.toString());\n      break;\n\n    case AggregateGroupByReducers.FIRST_VALUE:\n      {\n        (0, _1.pushArgumentsWithLength)(args, () => {\n          args.push(reducer.property);\n\n          if (reducer.BY) {\n            args.push('BY');\n\n            if (typeof reducer.BY === 'string') {\n              args.push(reducer.BY);\n            } else {\n              args.push(reducer.BY.property);\n\n              if (reducer.BY.direction) {\n                args.push(reducer.BY.direction);\n              }\n            }\n          }\n        });\n        break;\n      }\n\n    case AggregateGroupByReducers.RANDOM_SAMPLE:\n      args.push('2', reducer.property, reducer.sampleSize.toString());\n      break;\n  }\n\n  if (reducer.AS) {\n    args.push('AS', reducer.AS);\n  }\n}\n\nfunction transformReply(rawReply) {\n  const results = [];\n\n  for (let i = 1; i < rawReply.length; i++) {\n    results.push((0, generic_transformers_1.transformTuplesReply)(rawReply[i]));\n  }\n\n  return {\n    total: rawReply[0],\n    results\n  };\n}\n\nexports.transformReply = transformReply;","map":{"version":3,"names":["Object","defineProperty","exports","value","transformReply","pushAggregatehOptions","transformArguments","IS_READ_ONLY","FIRST_KEY_INDEX","AggregateGroupByReducers","AggregateSteps","generic_transformers_1","require","_1","index","query","options","args","VERBATIM","push","LOAD","pushArgumentsWithLength","Array","isArray","load","pushLoadField","STEPS","step","type","GROUPBY","properties","pushVerdictArgument","REDUCE","reducer","pushGroupByReducer","SORTBY","pushSortByArguments","BY","MAX","toString","APPLY","expression","AS","LIMIT","from","size","FILTER","pushParamsArgs","PARAMS","DIALECT","toLoad","identifier","COUNT","COUNT_DISTINCT","COUNT_DISTINCTISH","SUM","MIN","AVG","STDDEV","TOLIST","property","QUANTILE","quantile","FIRST_VALUE","direction","RANDOM_SAMPLE","sampleSize","rawReply","results","i","length","transformTuplesReply","total"],"sources":["C:/Users/gnage/node_modules/@redis/search/dist/commands/AGGREGATE.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformReply = exports.pushAggregatehOptions = exports.transformArguments = exports.IS_READ_ONLY = exports.FIRST_KEY_INDEX = exports.AggregateGroupByReducers = exports.AggregateSteps = void 0;\nconst generic_transformers_1 = require(\"@redis/client/dist/lib/commands/generic-transformers\");\nconst _1 = require(\".\");\nvar AggregateSteps;\n(function (AggregateSteps) {\n    AggregateSteps[\"GROUPBY\"] = \"GROUPBY\";\n    AggregateSteps[\"SORTBY\"] = \"SORTBY\";\n    AggregateSteps[\"APPLY\"] = \"APPLY\";\n    AggregateSteps[\"LIMIT\"] = \"LIMIT\";\n    AggregateSteps[\"FILTER\"] = \"FILTER\";\n})(AggregateSteps = exports.AggregateSteps || (exports.AggregateSteps = {}));\nvar AggregateGroupByReducers;\n(function (AggregateGroupByReducers) {\n    AggregateGroupByReducers[\"COUNT\"] = \"COUNT\";\n    AggregateGroupByReducers[\"COUNT_DISTINCT\"] = \"COUNT_DISTINCT\";\n    AggregateGroupByReducers[\"COUNT_DISTINCTISH\"] = \"COUNT_DISTINCTISH\";\n    AggregateGroupByReducers[\"SUM\"] = \"SUM\";\n    AggregateGroupByReducers[\"MIN\"] = \"MIN\";\n    AggregateGroupByReducers[\"MAX\"] = \"MAX\";\n    AggregateGroupByReducers[\"AVG\"] = \"AVG\";\n    AggregateGroupByReducers[\"STDDEV\"] = \"STDDEV\";\n    AggregateGroupByReducers[\"QUANTILE\"] = \"QUANTILE\";\n    AggregateGroupByReducers[\"TOLIST\"] = \"TOLIST\";\n    AggregateGroupByReducers[\"TO_LIST\"] = \"TOLIST\";\n    AggregateGroupByReducers[\"FIRST_VALUE\"] = \"FIRST_VALUE\";\n    AggregateGroupByReducers[\"RANDOM_SAMPLE\"] = \"RANDOM_SAMPLE\";\n})(AggregateGroupByReducers = exports.AggregateGroupByReducers || (exports.AggregateGroupByReducers = {}));\nexports.FIRST_KEY_INDEX = 1;\nexports.IS_READ_ONLY = true;\nfunction transformArguments(index, query, options) {\n    return pushAggregatehOptions(['FT.AGGREGATE', index, query], options);\n}\nexports.transformArguments = transformArguments;\nfunction pushAggregatehOptions(args, options) {\n    if (options?.VERBATIM) {\n        args.push('VERBATIM');\n    }\n    if (options?.LOAD) {\n        args.push('LOAD');\n        (0, _1.pushArgumentsWithLength)(args, () => {\n            if (Array.isArray(options.LOAD)) {\n                for (const load of options.LOAD) {\n                    pushLoadField(args, load);\n                }\n            }\n            else {\n                pushLoadField(args, options.LOAD);\n            }\n        });\n    }\n    if (options?.STEPS) {\n        for (const step of options.STEPS) {\n            switch (step.type) {\n                case AggregateSteps.GROUPBY:\n                    args.push('GROUPBY');\n                    if (!step.properties) {\n                        args.push('0');\n                    }\n                    else {\n                        (0, generic_transformers_1.pushVerdictArgument)(args, step.properties);\n                    }\n                    if (Array.isArray(step.REDUCE)) {\n                        for (const reducer of step.REDUCE) {\n                            pushGroupByReducer(args, reducer);\n                        }\n                    }\n                    else {\n                        pushGroupByReducer(args, step.REDUCE);\n                    }\n                    break;\n                case AggregateSteps.SORTBY:\n                    (0, _1.pushSortByArguments)(args, 'SORTBY', step.BY);\n                    if (step.MAX) {\n                        args.push('MAX', step.MAX.toString());\n                    }\n                    break;\n                case AggregateSteps.APPLY:\n                    args.push('APPLY', step.expression, 'AS', step.AS);\n                    break;\n                case AggregateSteps.LIMIT:\n                    args.push('LIMIT', step.from.toString(), step.size.toString());\n                    break;\n                case AggregateSteps.FILTER:\n                    args.push('FILTER', step.expression);\n                    break;\n            }\n        }\n    }\n    (0, _1.pushParamsArgs)(args, options?.PARAMS);\n    if (options?.DIALECT) {\n        args.push('DIALECT', options.DIALECT.toString());\n    }\n    return args;\n}\nexports.pushAggregatehOptions = pushAggregatehOptions;\nfunction pushLoadField(args, toLoad) {\n    if (typeof toLoad === 'string') {\n        args.push(toLoad);\n    }\n    else {\n        args.push(toLoad.identifier);\n        if (toLoad.AS) {\n            args.push('AS', toLoad.AS);\n        }\n    }\n}\nfunction pushGroupByReducer(args, reducer) {\n    args.push('REDUCE', reducer.type);\n    switch (reducer.type) {\n        case AggregateGroupByReducers.COUNT:\n            args.push('0');\n            break;\n        case AggregateGroupByReducers.COUNT_DISTINCT:\n        case AggregateGroupByReducers.COUNT_DISTINCTISH:\n        case AggregateGroupByReducers.SUM:\n        case AggregateGroupByReducers.MIN:\n        case AggregateGroupByReducers.MAX:\n        case AggregateGroupByReducers.AVG:\n        case AggregateGroupByReducers.STDDEV:\n        case AggregateGroupByReducers.TOLIST:\n            args.push('1', reducer.property);\n            break;\n        case AggregateGroupByReducers.QUANTILE:\n            args.push('2', reducer.property, reducer.quantile.toString());\n            break;\n        case AggregateGroupByReducers.FIRST_VALUE: {\n            (0, _1.pushArgumentsWithLength)(args, () => {\n                args.push(reducer.property);\n                if (reducer.BY) {\n                    args.push('BY');\n                    if (typeof reducer.BY === 'string') {\n                        args.push(reducer.BY);\n                    }\n                    else {\n                        args.push(reducer.BY.property);\n                        if (reducer.BY.direction) {\n                            args.push(reducer.BY.direction);\n                        }\n                    }\n                }\n            });\n            break;\n        }\n        case AggregateGroupByReducers.RANDOM_SAMPLE:\n            args.push('2', reducer.property, reducer.sampleSize.toString());\n            break;\n    }\n    if (reducer.AS) {\n        args.push('AS', reducer.AS);\n    }\n}\nfunction transformReply(rawReply) {\n    const results = [];\n    for (let i = 1; i < rawReply.length; i++) {\n        results.push((0, generic_transformers_1.transformTuplesReply)(rawReply[i]));\n    }\n    return {\n        total: rawReply[0],\n        results\n    };\n}\nexports.transformReply = transformReply;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}