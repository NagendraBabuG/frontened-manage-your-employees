{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nimport { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signInWithRedirect, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth'; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyApVjocGQ54ce4IoLT4lHMU_2oeTEHzrn8\",\n  authDomain: \"practice-firebase-5ccd8.firebaseapp.com\",\n  projectId: \"practice-firebase-5ccd8\",\n  storageBucket: \"practice-firebase-5ccd8.appspot.com\",\n  messagingSenderId: \"869415489289\",\n  appId: \"1:869415489289:web:958250a978264e109e4dd8\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  console.log(additionalInformation);\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user ', error.message);\n    }\n  } // console.log(userDocRef)\n\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  console.log(email, password);\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["getFirestore","doc","getDoc","setDoc","initializeApp","GoogleAuthProvider","getAuth","signInWithPopup","signInWithRedirect","createUserWithEmailAndPassword","signInWithEmailAndPassword","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","additionalInformation","console","log","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword"],"sources":["C:/Users/gnage/Desktop/startc/Project/blog/client/src/utils/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport {getFirestore, doc, getDoc, setDoc} from 'firebase/firestore'\r\nimport { initializeApp } from \"firebase/app\";\r\nimport {GoogleAuthProvider, getAuth, signInWithPopup, signInWithRedirect, createUserWithEmailAndPassword, signInWithEmailAndPassword} from 'firebase/auth'\r\n\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyApVjocGQ54ce4IoLT4lHMU_2oeTEHzrn8\",\r\n  authDomain: \"practice-firebase-5ccd8.firebaseapp.com\",\r\n  projectId: \"practice-firebase-5ccd8\",\r\n  storageBucket: \"practice-firebase-5ccd8.appspot.com\",\r\n  messagingSenderId: \"869415489289\",\r\n  appId: \"1:869415489289:web:958250a978264e109e4dd8\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst provider = new GoogleAuthProvider();\r\nprovider.setCustomParameters({\r\n    prompt : \"select_account\"\r\n});\r\nexport const auth = getAuth();\r\nexport const signInWithGooglePopup = ()=> signInWithPopup(auth, provider);         \r\n\r\nexport const db = getFirestore();\r\n\r\n\r\nexport const  createUserDocumentFromAuth = async(userAuth, additionalInformation={})=>\r\n{\r\n  console.log(additionalInformation)\r\n  if(!userAuth) return;\r\n  const userDocRef = doc(db, 'users', userAuth.uid);\r\n  const userSnapshot = await getDoc(userDocRef);\r\n  if(!userSnapshot.exists())\r\n  {\r\n    const {displayName, email} = userAuth;\r\n    const createdAt = new Date();\r\n    try{\r\n      await setDoc(userDocRef, {displayName, email, createdAt, ...additionalInformation,});\r\n    }\r\n    catch(error)\r\n    {\r\n      console.log('error creating the user ', error.message)\r\n    }\r\n  \r\n  }\r\n\r\n // console.log(userDocRef)\r\n  return userDocRef;\r\n\r\n\r\n};  \r\n\r\n\r\nexport const createAuthUserWithEmailAndPassword = async(email, password)=> {\r\n    console.log(email, password)\r\n    if(!email || !password) return;\r\n    return await createUserWithEmailAndPassword(auth, email, password);\r\n}\r\n\r\n\r\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if(!email || !password) return;\r\n  return await signInWithEmailAndPassword(auth, email, password);\r\n}"],"mappings":"AAAA;AACA,SAAQA,YAAR,EAAsBC,GAAtB,EAA2BC,MAA3B,EAAmCC,MAAnC,QAAgD,oBAAhD;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAAQC,kBAAR,EAA4BC,OAA5B,EAAqCC,eAArC,EAAsDC,kBAAtD,EAA0EC,8BAA1E,EAA0GC,0BAA1G,QAA2I,eAA3I,C,CAGA;AACA;AAEA;;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCADa;EAErBC,UAAU,EAAE,yCAFS;EAGrBC,SAAS,EAAE,yBAHU;EAIrBC,aAAa,EAAE,qCAJM;EAKrBC,iBAAiB,EAAE,cALE;EAMrBC,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACA,MAAMC,WAAW,GAAGd,aAAa,CAACO,cAAD,CAAjC;AAEA,MAAMQ,QAAQ,GAAG,IAAId,kBAAJ,EAAjB;AACAc,QAAQ,CAACC,mBAAT,CAA6B;EACzBC,MAAM,EAAG;AADgB,CAA7B;AAGA,OAAO,MAAMC,IAAI,GAAGhB,OAAO,EAApB;AACP,OAAO,MAAMiB,qBAAqB,GAAG,MAAKhB,eAAe,CAACe,IAAD,EAAOH,QAAP,CAAlD;AAEP,OAAO,MAAMK,EAAE,GAAGxB,YAAY,EAAvB;AAGP,OAAO,MAAOyB,0BAA0B,GAAG,gBAAMC,QAAN,EAC3C;EAAA,IAD2DC,qBAC3D,uEADiF,EACjF;EACEC,OAAO,CAACC,GAAR,CAAYF,qBAAZ;EACA,IAAG,CAACD,QAAJ,EAAc;EACd,MAAMI,UAAU,GAAG7B,GAAG,CAACuB,EAAD,EAAK,OAAL,EAAcE,QAAQ,CAACK,GAAvB,CAAtB;EACA,MAAMC,YAAY,GAAG,MAAM9B,MAAM,CAAC4B,UAAD,CAAjC;;EACA,IAAG,CAACE,YAAY,CAACC,MAAb,EAAJ,EACA;IACE,MAAM;MAACC,WAAD;MAAcC;IAAd,IAAuBT,QAA7B;IACA,MAAMU,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;IACA,IAAG;MACD,MAAMlC,MAAM,CAAC2B,UAAD,EAAa;QAACI,WAAD;QAAcC,KAAd;QAAqBC,SAArB;QAAgC,GAAGT;MAAnC,CAAb,CAAZ;IACD,CAFD,CAGA,OAAMW,KAAN,EACA;MACEV,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCS,KAAK,CAACC,OAA9C;IACD;EAEF,CAjBH,CAmBC;;;EACC,OAAOT,UAAP;AAGD,CAxBM;AA2BP,OAAO,MAAMU,kCAAkC,GAAG,OAAML,KAAN,EAAaM,QAAb,KAAyB;EACvEb,OAAO,CAACC,GAAR,CAAYM,KAAZ,EAAmBM,QAAnB;EACA,IAAG,CAACN,KAAD,IAAU,CAACM,QAAd,EAAwB;EACxB,OAAO,MAAMhC,8BAA8B,CAACa,IAAD,EAAOa,KAAP,EAAcM,QAAd,CAA3C;AACH,CAJM;AAOP,OAAO,MAAMC,kCAAkC,GAAG,OAAOP,KAAP,EAAcM,QAAd,KAA2B;EAC3E,IAAG,CAACN,KAAD,IAAU,CAACM,QAAd,EAAwB;EACxB,OAAO,MAAM/B,0BAA0B,CAACY,IAAD,EAAOa,KAAP,EAAcM,QAAd,CAAvC;AACD,CAHM"},"metadata":{},"sourceType":"module"}