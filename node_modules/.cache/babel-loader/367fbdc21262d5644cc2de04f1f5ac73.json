{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _RedisClusterSlots_instances, _RedisClusterSlots_options, _RedisClusterSlots_Client, _RedisClusterSlots_onError, _RedisClusterSlots_nodeByAddress, _RedisClusterSlots_slots, _RedisClusterSlots_discoverNodes, _RedisClusterSlots_runningRediscoverPromise, _RedisClusterSlots_rediscover, _RedisClusterSlots_reset, _RedisClusterSlots_clientOptionsDefaults, _RedisClusterSlots_initiateClient, _RedisClusterSlots_getNodeAddress, _RedisClusterSlots_initiateClientForNode, _RedisClusterSlots_slotClientIterator, _RedisClusterSlots_getSlotClient, _RedisClusterSlots_randomClientIterator, _RedisClusterSlots_getRandomClient, _RedisClusterSlots_destroy;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst client_1 = require(\"../client\");\n\nconst errors_1 = require(\"../errors\"); // We need to use 'require', because it's not possible with Typescript to import\n// function that are exported as 'module.exports = function`, without esModuleInterop\n// set to true.\n\n\nconst calculateSlot = require('cluster-key-slot');\n\nclass RedisClusterSlots {\n  constructor(options, onError) {\n    _RedisClusterSlots_instances.add(this);\n\n    _RedisClusterSlots_options.set(this, void 0);\n\n    _RedisClusterSlots_Client.set(this, void 0);\n\n    _RedisClusterSlots_onError.set(this, void 0);\n\n    _RedisClusterSlots_nodeByAddress.set(this, new Map());\n\n    _RedisClusterSlots_slots.set(this, []);\n\n    _RedisClusterSlots_runningRediscoverPromise.set(this, void 0);\n\n    _RedisClusterSlots_randomClientIterator.set(this, void 0);\n\n    __classPrivateFieldSet(this, _RedisClusterSlots_options, options, \"f\");\n\n    __classPrivateFieldSet(this, _RedisClusterSlots_Client, client_1.default.extend(options), \"f\");\n\n    __classPrivateFieldSet(this, _RedisClusterSlots_onError, onError, \"f\");\n  }\n\n  async connect() {\n    for (const rootNode of __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes) {\n      if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, rootNode)) return;\n    }\n\n    throw new errors_1.RootNodesUnavailableError();\n  }\n\n  async rediscover(startWith) {\n    if (!__classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\")) {\n      __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_rediscover).call(this, startWith).finally(() => __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, undefined, \"f\")), \"f\");\n    }\n\n    return __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\");\n  }\n\n  getSlotMaster(slot) {\n    return __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slot].master;\n  }\n\n  getClient(firstKey, isReadonly) {\n    if (!firstKey) {\n      return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getRandomClient).call(this);\n    }\n\n    const slot = calculateSlot(firstKey);\n\n    if (!isReadonly || !__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas) {\n      return this.getSlotMaster(slot).client;\n    }\n\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getSlotClient).call(this, slot);\n  }\n\n  getMasters() {\n    const masters = [];\n\n    for (const node of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n      if (node.client.options?.readonly) continue;\n      masters.push(node);\n    }\n\n    return masters;\n  }\n\n  getNodeByAddress(address) {\n    const mappedAddress = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, address);\n\n    return __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").get(mappedAddress ? `${mappedAddress.host}:${mappedAddress.port}` : address);\n  }\n\n  quit() {\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.quit());\n  }\n\n  disconnect() {\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.disconnect());\n  }\n\n}\n\nexports.default = RedisClusterSlots;\n_RedisClusterSlots_options = new WeakMap(), _RedisClusterSlots_Client = new WeakMap(), _RedisClusterSlots_onError = new WeakMap(), _RedisClusterSlots_nodeByAddress = new WeakMap(), _RedisClusterSlots_slots = new WeakMap(), _RedisClusterSlots_runningRediscoverPromise = new WeakMap(), _RedisClusterSlots_randomClientIterator = new WeakMap(), _RedisClusterSlots_instances = new WeakSet(), _RedisClusterSlots_discoverNodes = async function _RedisClusterSlots_discoverNodes(clientOptions) {\n  const client = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClient).call(this, clientOptions);\n\n  await client.connect();\n\n  try {\n    await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_reset).call(this, await client.clusterNodes());\n    return true;\n  } catch (err) {\n    __classPrivateFieldGet(this, _RedisClusterSlots_onError, \"f\").call(this, err);\n\n    return false;\n  } finally {\n    if (client.isOpen) {\n      await client.disconnect();\n    }\n  }\n}, _RedisClusterSlots_rediscover = async function _RedisClusterSlots_rediscover(startWith) {\n  if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, startWith.options)) return;\n\n  for (const {\n    client\n  } of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n    if (client === startWith) continue;\n    if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, client.options)) return;\n  }\n\n  throw new Error('None of the cluster nodes is available');\n}, _RedisClusterSlots_reset = async function _RedisClusterSlots_reset(masters) {\n  // Override this.#slots and add not existing clients to this.#nodeByAddress\n  const promises = [],\n        clientsInUse = new Set();\n\n  for (const master of masters) {\n    const slot = {\n      master: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClientForNode).call(this, master, false, clientsInUse, promises),\n      replicas: __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas ? master.replicas.map(replica => __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClientForNode).call(this, replica, true, clientsInUse, promises)) : [],\n      clientIterator: undefined // will be initiated in use\n\n    };\n\n    for (const {\n      from,\n      to\n    } of master.slots) {\n      for (let i = from; i <= to; i++) {\n        __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[i] = slot;\n      }\n    }\n  } // Remove unused clients from this.#nodeByAddress using clientsInUse\n\n\n  for (const [address, {\n    client\n  }] of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").entries()) {\n    if (clientsInUse.has(address)) continue;\n    promises.push(client.disconnect());\n\n    __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").delete(address);\n  }\n\n  await Promise.all(promises);\n}, _RedisClusterSlots_clientOptionsDefaults = function _RedisClusterSlots_clientOptionsDefaults(options) {\n  if (!__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults) return options;\n  return { ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults,\n    ...options,\n    socket: __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket && options?.socket ? { ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket,\n      ...options.socket\n    } : __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket ?? options?.socket\n  };\n}, _RedisClusterSlots_initiateClient = function _RedisClusterSlots_initiateClient(options) {\n  return new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, \"f\"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_clientOptionsDefaults).call(this, options)).on('error', __classPrivateFieldGet(this, _RedisClusterSlots_onError, \"f\"));\n}, _RedisClusterSlots_getNodeAddress = function _RedisClusterSlots_getNodeAddress(address) {\n  switch (typeof __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap) {\n    case 'object':\n      return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap[address];\n\n    case 'function':\n      return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap(address);\n  }\n}, _RedisClusterSlots_initiateClientForNode = function _RedisClusterSlots_initiateClientForNode(nodeData, readonly, clientsInUse, promises) {\n  const address = `${nodeData.host}:${nodeData.port}`;\n  clientsInUse.add(address);\n\n  let node = __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").get(address);\n\n  if (!node) {\n    node = {\n      id: nodeData.id,\n      client: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClient).call(this, {\n        socket: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, address) ?? {\n          host: nodeData.host,\n          port: nodeData.port\n        },\n        readonly\n      })\n    };\n    promises.push(node.client.connect());\n\n    __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").set(address, node);\n  }\n\n  return node;\n}, _RedisClusterSlots_slotClientIterator = function* _RedisClusterSlots_slotClientIterator(slotNumber) {\n  const slot = __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slotNumber];\n\n  yield slot.master.client;\n\n  for (const replica of slot.replicas) {\n    yield replica.client;\n  }\n}, _RedisClusterSlots_getSlotClient = function _RedisClusterSlots_getSlotClient(slotNumber) {\n  const slot = __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slotNumber];\n\n  if (!slot.clientIterator) {\n    slot.clientIterator = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_slotClientIterator).call(this, slotNumber);\n  }\n\n  const {\n    done,\n    value\n  } = slot.clientIterator.next();\n\n  if (done) {\n    slot.clientIterator = undefined;\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getSlotClient).call(this, slotNumber);\n  }\n\n  return value;\n}, _RedisClusterSlots_getRandomClient = function _RedisClusterSlots_getRandomClient() {\n  if (!__classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").size) {\n    throw new Error('Cluster is not connected');\n  }\n\n  if (!__classPrivateFieldGet(this, _RedisClusterSlots_randomClientIterator, \"f\")) {\n    __classPrivateFieldSet(this, _RedisClusterSlots_randomClientIterator, __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values(), \"f\");\n  }\n\n  const {\n    done,\n    value\n  } = __classPrivateFieldGet(this, _RedisClusterSlots_randomClientIterator, \"f\").next();\n\n  if (done) {\n    __classPrivateFieldSet(this, _RedisClusterSlots_randomClientIterator, undefined, \"f\");\n\n    return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getRandomClient).call(this);\n  }\n\n  return value.client;\n}, _RedisClusterSlots_destroy = async function _RedisClusterSlots_destroy(fn) {\n  const promises = [];\n\n  for (const {\n    client\n  } of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n    promises.push(fn(client));\n  }\n\n  await Promise.all(promises);\n\n  __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").clear();\n\n  __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\").splice(0);\n};","map":{"version":3,"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","_RedisClusterSlots_instances","_RedisClusterSlots_options","_RedisClusterSlots_Client","_RedisClusterSlots_onError","_RedisClusterSlots_nodeByAddress","_RedisClusterSlots_slots","_RedisClusterSlots_discoverNodes","_RedisClusterSlots_runningRediscoverPromise","_RedisClusterSlots_rediscover","_RedisClusterSlots_reset","_RedisClusterSlots_clientOptionsDefaults","_RedisClusterSlots_initiateClient","_RedisClusterSlots_getNodeAddress","_RedisClusterSlots_initiateClientForNode","_RedisClusterSlots_slotClientIterator","_RedisClusterSlots_getSlotClient","_RedisClusterSlots_randomClientIterator","_RedisClusterSlots_getRandomClient","_RedisClusterSlots_destroy","Object","defineProperty","exports","client_1","require","errors_1","calculateSlot","RedisClusterSlots","constructor","options","onError","add","Map","default","extend","connect","rootNode","rootNodes","RootNodesUnavailableError","rediscover","startWith","finally","undefined","getSlotMaster","slot","master","getClient","firstKey","isReadonly","useReplicas","client","getMasters","masters","node","values","readonly","push","getNodeByAddress","address","mappedAddress","host","port","quit","disconnect","WeakMap","WeakSet","clientOptions","clusterNodes","err","isOpen","Error","promises","clientsInUse","Set","replicas","map","replica","clientIterator","from","to","slots","i","entries","delete","Promise","all","defaults","socket","on","nodeAddressMap","nodeData","id","slotNumber","done","next","size","fn","clear","splice"],"sources":["C:/Users/gnage/node_modules/@redis/client/dist/lib/cluster/cluster-slots.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _RedisClusterSlots_instances, _RedisClusterSlots_options, _RedisClusterSlots_Client, _RedisClusterSlots_onError, _RedisClusterSlots_nodeByAddress, _RedisClusterSlots_slots, _RedisClusterSlots_discoverNodes, _RedisClusterSlots_runningRediscoverPromise, _RedisClusterSlots_rediscover, _RedisClusterSlots_reset, _RedisClusterSlots_clientOptionsDefaults, _RedisClusterSlots_initiateClient, _RedisClusterSlots_getNodeAddress, _RedisClusterSlots_initiateClientForNode, _RedisClusterSlots_slotClientIterator, _RedisClusterSlots_getSlotClient, _RedisClusterSlots_randomClientIterator, _RedisClusterSlots_getRandomClient, _RedisClusterSlots_destroy;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_1 = require(\"../client\");\nconst errors_1 = require(\"../errors\");\n// We need to use 'require', because it's not possible with Typescript to import\n// function that are exported as 'module.exports = function`, without esModuleInterop\n// set to true.\nconst calculateSlot = require('cluster-key-slot');\nclass RedisClusterSlots {\n    constructor(options, onError) {\n        _RedisClusterSlots_instances.add(this);\n        _RedisClusterSlots_options.set(this, void 0);\n        _RedisClusterSlots_Client.set(this, void 0);\n        _RedisClusterSlots_onError.set(this, void 0);\n        _RedisClusterSlots_nodeByAddress.set(this, new Map());\n        _RedisClusterSlots_slots.set(this, []);\n        _RedisClusterSlots_runningRediscoverPromise.set(this, void 0);\n        _RedisClusterSlots_randomClientIterator.set(this, void 0);\n        __classPrivateFieldSet(this, _RedisClusterSlots_options, options, \"f\");\n        __classPrivateFieldSet(this, _RedisClusterSlots_Client, client_1.default.extend(options), \"f\");\n        __classPrivateFieldSet(this, _RedisClusterSlots_onError, onError, \"f\");\n    }\n    async connect() {\n        for (const rootNode of __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").rootNodes) {\n            if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, rootNode))\n                return;\n        }\n        throw new errors_1.RootNodesUnavailableError();\n    }\n    async rediscover(startWith) {\n        if (!__classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\")) {\n            __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_rediscover).call(this, startWith)\n                .finally(() => __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, undefined, \"f\")), \"f\");\n        }\n        return __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, \"f\");\n    }\n    getSlotMaster(slot) {\n        return __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slot].master;\n    }\n    getClient(firstKey, isReadonly) {\n        if (!firstKey) {\n            return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getRandomClient).call(this);\n        }\n        const slot = calculateSlot(firstKey);\n        if (!isReadonly || !__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas) {\n            return this.getSlotMaster(slot).client;\n        }\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getSlotClient).call(this, slot);\n    }\n    getMasters() {\n        const masters = [];\n        for (const node of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n            if (node.client.options?.readonly)\n                continue;\n            masters.push(node);\n        }\n        return masters;\n    }\n    getNodeByAddress(address) {\n        const mappedAddress = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, address);\n        return __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").get(mappedAddress ? `${mappedAddress.host}:${mappedAddress.port}` : address);\n    }\n    quit() {\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.quit());\n    }\n    disconnect() {\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_destroy).call(this, client => client.disconnect());\n    }\n}\nexports.default = RedisClusterSlots;\n_RedisClusterSlots_options = new WeakMap(), _RedisClusterSlots_Client = new WeakMap(), _RedisClusterSlots_onError = new WeakMap(), _RedisClusterSlots_nodeByAddress = new WeakMap(), _RedisClusterSlots_slots = new WeakMap(), _RedisClusterSlots_runningRediscoverPromise = new WeakMap(), _RedisClusterSlots_randomClientIterator = new WeakMap(), _RedisClusterSlots_instances = new WeakSet(), _RedisClusterSlots_discoverNodes = async function _RedisClusterSlots_discoverNodes(clientOptions) {\n    const client = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClient).call(this, clientOptions);\n    await client.connect();\n    try {\n        await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_reset).call(this, await client.clusterNodes());\n        return true;\n    }\n    catch (err) {\n        __classPrivateFieldGet(this, _RedisClusterSlots_onError, \"f\").call(this, err);\n        return false;\n    }\n    finally {\n        if (client.isOpen) {\n            await client.disconnect();\n        }\n    }\n}, _RedisClusterSlots_rediscover = async function _RedisClusterSlots_rediscover(startWith) {\n    if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, startWith.options))\n        return;\n    for (const { client } of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n        if (client === startWith)\n            continue;\n        if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_discoverNodes).call(this, client.options))\n            return;\n    }\n    throw new Error('None of the cluster nodes is available');\n}, _RedisClusterSlots_reset = async function _RedisClusterSlots_reset(masters) {\n    // Override this.#slots and add not existing clients to this.#nodeByAddress\n    const promises = [], clientsInUse = new Set();\n    for (const master of masters) {\n        const slot = {\n            master: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClientForNode).call(this, master, false, clientsInUse, promises),\n            replicas: __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").useReplicas ?\n                master.replicas.map(replica => __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClientForNode).call(this, replica, true, clientsInUse, promises)) :\n                [],\n            clientIterator: undefined // will be initiated in use\n        };\n        for (const { from, to } of master.slots) {\n            for (let i = from; i <= to; i++) {\n                __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[i] = slot;\n            }\n        }\n    }\n    // Remove unused clients from this.#nodeByAddress using clientsInUse\n    for (const [address, { client }] of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").entries()) {\n        if (clientsInUse.has(address))\n            continue;\n        promises.push(client.disconnect());\n        __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").delete(address);\n    }\n    await Promise.all(promises);\n}, _RedisClusterSlots_clientOptionsDefaults = function _RedisClusterSlots_clientOptionsDefaults(options) {\n    if (!__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults)\n        return options;\n    return {\n        ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults,\n        ...options,\n        socket: __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket && options?.socket ? {\n            ...__classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket,\n            ...options.socket\n        } : __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").defaults.socket ?? options?.socket\n    };\n}, _RedisClusterSlots_initiateClient = function _RedisClusterSlots_initiateClient(options) {\n    return new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, \"f\"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_clientOptionsDefaults).call(this, options))\n        .on('error', __classPrivateFieldGet(this, _RedisClusterSlots_onError, \"f\"));\n}, _RedisClusterSlots_getNodeAddress = function _RedisClusterSlots_getNodeAddress(address) {\n    switch (typeof __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap) {\n        case 'object':\n            return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap[address];\n        case 'function':\n            return __classPrivateFieldGet(this, _RedisClusterSlots_options, \"f\").nodeAddressMap(address);\n    }\n}, _RedisClusterSlots_initiateClientForNode = function _RedisClusterSlots_initiateClientForNode(nodeData, readonly, clientsInUse, promises) {\n    const address = `${nodeData.host}:${nodeData.port}`;\n    clientsInUse.add(address);\n    let node = __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").get(address);\n    if (!node) {\n        node = {\n            id: nodeData.id,\n            client: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_initiateClient).call(this, {\n                socket: __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getNodeAddress).call(this, address) ?? {\n                    host: nodeData.host,\n                    port: nodeData.port\n                },\n                readonly\n            })\n        };\n        promises.push(node.client.connect());\n        __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").set(address, node);\n    }\n    return node;\n}, _RedisClusterSlots_slotClientIterator = function* _RedisClusterSlots_slotClientIterator(slotNumber) {\n    const slot = __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slotNumber];\n    yield slot.master.client;\n    for (const replica of slot.replicas) {\n        yield replica.client;\n    }\n}, _RedisClusterSlots_getSlotClient = function _RedisClusterSlots_getSlotClient(slotNumber) {\n    const slot = __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\")[slotNumber];\n    if (!slot.clientIterator) {\n        slot.clientIterator = __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_slotClientIterator).call(this, slotNumber);\n    }\n    const { done, value } = slot.clientIterator.next();\n    if (done) {\n        slot.clientIterator = undefined;\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getSlotClient).call(this, slotNumber);\n    }\n    return value;\n}, _RedisClusterSlots_getRandomClient = function _RedisClusterSlots_getRandomClient() {\n    if (!__classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").size) {\n        throw new Error('Cluster is not connected');\n    }\n    if (!__classPrivateFieldGet(this, _RedisClusterSlots_randomClientIterator, \"f\")) {\n        __classPrivateFieldSet(this, _RedisClusterSlots_randomClientIterator, __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values(), \"f\");\n    }\n    const { done, value } = __classPrivateFieldGet(this, _RedisClusterSlots_randomClientIterator, \"f\").next();\n    if (done) {\n        __classPrivateFieldSet(this, _RedisClusterSlots_randomClientIterator, undefined, \"f\");\n        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, \"m\", _RedisClusterSlots_getRandomClient).call(this);\n    }\n    return value.client;\n}, _RedisClusterSlots_destroy = async function _RedisClusterSlots_destroy(fn) {\n    const promises = [];\n    for (const { client } of __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").values()) {\n        promises.push(fn(client));\n    }\n    await Promise.all(promises);\n    __classPrivateFieldGet(this, _RedisClusterSlots_nodeByAddress, \"f\").clear();\n    __classPrivateFieldGet(this, _RedisClusterSlots_slots, \"f\").splice(0);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}