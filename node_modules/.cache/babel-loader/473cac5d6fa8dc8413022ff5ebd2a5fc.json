{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst errors_1 = require(\"../../errors\");\n\nconst buffer_1 = require(\"./composers/buffer\");\n\nconst string_1 = require(\"./composers/string\"); // RESP2 specification\n// https://redis.io/topics/protocol\n\n\nvar Types;\n\n(function (Types) {\n  Types[Types[\"SIMPLE_STRING\"] = 43] = \"SIMPLE_STRING\";\n  Types[Types[\"ERROR\"] = 45] = \"ERROR\";\n  Types[Types[\"INTEGER\"] = 58] = \"INTEGER\";\n  Types[Types[\"BULK_STRING\"] = 36] = \"BULK_STRING\";\n  Types[Types[\"ARRAY\"] = 42] = \"ARRAY\"; // *\n})(Types || (Types = {}));\n\nvar ASCII;\n\n(function (ASCII) {\n  ASCII[ASCII[\"CR\"] = 13] = \"CR\";\n  ASCII[ASCII[\"ZERO\"] = 48] = \"ZERO\";\n  ASCII[ASCII[\"MINUS\"] = 45] = \"MINUS\";\n})(ASCII || (ASCII = {})); // Using TypeScript `private` and not the build-in `#` to avoid __classPrivateFieldGet and __classPrivateFieldSet\n\n\nclass RESP2Decoder {\n  constructor(options) {\n    Object.defineProperty(this, \"options\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: options\n    });\n    Object.defineProperty(this, \"cursor\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"type\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"bufferComposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new buffer_1.default()\n    });\n    Object.defineProperty(this, \"stringComposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new string_1.default()\n    });\n    Object.defineProperty(this, \"currentStringComposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.stringComposer\n    });\n    Object.defineProperty(this, \"integer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"isNegativeInteger\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"bulkStringRemainingLength\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"arraysInProcess\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"initializeArray\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"arrayItemType\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n\n  reset() {\n    this.cursor = 0;\n    this.type = undefined;\n    this.bufferComposer.reset();\n    this.stringComposer.reset();\n    this.currentStringComposer = this.stringComposer;\n  }\n\n  write(chunk) {\n    while (this.cursor < chunk.length) {\n      if (!this.type) {\n        this.currentStringComposer = this.options.returnStringsAsBuffers() ? this.bufferComposer : this.stringComposer;\n        this.type = chunk[this.cursor];\n        if (++this.cursor >= chunk.length) break;\n      }\n\n      const reply = this.parseType(chunk, this.type);\n      if (reply === undefined) break;\n      this.type = undefined;\n      this.options.onReply(reply);\n    }\n\n    this.cursor -= chunk.length;\n  }\n\n  parseType(chunk, type, arraysToKeep) {\n    switch (type) {\n      case Types.SIMPLE_STRING:\n        return this.parseSimpleString(chunk);\n\n      case Types.ERROR:\n        return this.parseError(chunk);\n\n      case Types.INTEGER:\n        return this.parseInteger(chunk);\n\n      case Types.BULK_STRING:\n        return this.parseBulkString(chunk);\n\n      case Types.ARRAY:\n        return this.parseArray(chunk, arraysToKeep);\n    }\n  }\n\n  compose(chunk, composer) {\n    for (let i = this.cursor; i < chunk.length; i++) {\n      if (chunk[i] === ASCII.CR) {\n        const reply = composer.end(chunk.subarray(this.cursor, i));\n        this.cursor = i + 2;\n        return reply;\n      }\n    }\n\n    const toWrite = chunk.subarray(this.cursor);\n    composer.write(toWrite);\n    this.cursor = chunk.length;\n  }\n\n  parseSimpleString(chunk) {\n    return this.compose(chunk, this.currentStringComposer);\n  }\n\n  parseError(chunk) {\n    const message = this.compose(chunk, this.stringComposer);\n\n    if (message !== undefined) {\n      return new errors_1.ErrorReply(message);\n    }\n  }\n\n  parseInteger(chunk) {\n    if (this.isNegativeInteger === undefined) {\n      this.isNegativeInteger = chunk[this.cursor] === ASCII.MINUS;\n      if (this.isNegativeInteger && ++this.cursor === chunk.length) return;\n    }\n\n    do {\n      const byte = chunk[this.cursor];\n\n      if (byte === ASCII.CR) {\n        const integer = this.isNegativeInteger ? -this.integer : this.integer;\n        this.integer = 0;\n        this.isNegativeInteger = undefined;\n        this.cursor += 2;\n        return integer;\n      }\n\n      this.integer = this.integer * 10 + byte - ASCII.ZERO;\n    } while (++this.cursor < chunk.length);\n  }\n\n  parseBulkString(chunk) {\n    if (this.bulkStringRemainingLength === undefined) {\n      const length = this.parseInteger(chunk);\n      if (length === undefined) return;\n      if (length === -1) return null;\n      this.bulkStringRemainingLength = length;\n      if (this.cursor >= chunk.length) return;\n    }\n\n    const end = this.cursor + this.bulkStringRemainingLength;\n\n    if (chunk.length >= end) {\n      const reply = this.currentStringComposer.end(chunk.subarray(this.cursor, end));\n      this.bulkStringRemainingLength = undefined;\n      this.cursor = end + 2;\n      return reply;\n    }\n\n    const toWrite = chunk.subarray(this.cursor);\n    this.currentStringComposer.write(toWrite);\n    this.bulkStringRemainingLength -= toWrite.length;\n    this.cursor = chunk.length;\n  }\n\n  parseArray(chunk) {\n    let arraysToKeep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (this.initializeArray || this.arraysInProcess.length === arraysToKeep) {\n      const length = this.parseInteger(chunk);\n\n      if (length === undefined) {\n        this.initializeArray = true;\n        return undefined;\n      }\n\n      this.initializeArray = false;\n      this.arrayItemType = undefined;\n\n      if (length === -1) {\n        return this.returnArrayReply(null, arraysToKeep);\n      } else if (length === 0) {\n        return this.returnArrayReply([], arraysToKeep);\n      }\n\n      this.arraysInProcess.push({\n        array: new Array(length),\n        pushCounter: 0\n      });\n    }\n\n    while (this.cursor < chunk.length) {\n      if (!this.arrayItemType) {\n        this.arrayItemType = chunk[this.cursor];\n        if (++this.cursor >= chunk.length) break;\n      }\n\n      const item = this.parseType(chunk, this.arrayItemType, arraysToKeep + 1);\n      if (item === undefined) break;\n      this.arrayItemType = undefined;\n      const reply = this.pushArrayItem(item, arraysToKeep);\n      if (reply !== undefined) return reply;\n    }\n  }\n\n  returnArrayReply(reply, arraysToKeep) {\n    if (this.arraysInProcess.length <= arraysToKeep) return reply;\n    return this.pushArrayItem(reply, arraysToKeep);\n  }\n\n  pushArrayItem(item, arraysToKeep) {\n    const to = this.arraysInProcess[this.arraysInProcess.length - 1];\n    to.array[to.pushCounter] = item;\n\n    if (++to.pushCounter === to.array.length) {\n      return this.returnArrayReply(this.arraysInProcess.pop().array, arraysToKeep);\n    }\n  }\n\n}\n\nexports.default = RESP2Decoder;","map":{"version":3,"names":["Object","defineProperty","exports","value","errors_1","require","buffer_1","string_1","Types","ASCII","RESP2Decoder","constructor","options","enumerable","configurable","writable","default","stringComposer","reset","cursor","type","undefined","bufferComposer","currentStringComposer","write","chunk","length","returnStringsAsBuffers","reply","parseType","onReply","arraysToKeep","SIMPLE_STRING","parseSimpleString","ERROR","parseError","INTEGER","parseInteger","BULK_STRING","parseBulkString","ARRAY","parseArray","compose","composer","i","CR","end","subarray","toWrite","message","ErrorReply","isNegativeInteger","MINUS","byte","integer","ZERO","bulkStringRemainingLength","initializeArray","arraysInProcess","arrayItemType","returnArrayReply","push","array","Array","pushCounter","item","pushArrayItem","to","pop"],"sources":["C:/Users/gnage/node_modules/@redis/client/dist/lib/client/RESP2/decoder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"../../errors\");\nconst buffer_1 = require(\"./composers/buffer\");\nconst string_1 = require(\"./composers/string\");\n// RESP2 specification\n// https://redis.io/topics/protocol\nvar Types;\n(function (Types) {\n    Types[Types[\"SIMPLE_STRING\"] = 43] = \"SIMPLE_STRING\";\n    Types[Types[\"ERROR\"] = 45] = \"ERROR\";\n    Types[Types[\"INTEGER\"] = 58] = \"INTEGER\";\n    Types[Types[\"BULK_STRING\"] = 36] = \"BULK_STRING\";\n    Types[Types[\"ARRAY\"] = 42] = \"ARRAY\"; // *\n})(Types || (Types = {}));\nvar ASCII;\n(function (ASCII) {\n    ASCII[ASCII[\"CR\"] = 13] = \"CR\";\n    ASCII[ASCII[\"ZERO\"] = 48] = \"ZERO\";\n    ASCII[ASCII[\"MINUS\"] = 45] = \"MINUS\";\n})(ASCII || (ASCII = {}));\n// Using TypeScript `private` and not the build-in `#` to avoid __classPrivateFieldGet and __classPrivateFieldSet\nclass RESP2Decoder {\n    constructor(options) {\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"cursor\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"bufferComposer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new buffer_1.default()\n        });\n        Object.defineProperty(this, \"stringComposer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new string_1.default()\n        });\n        Object.defineProperty(this, \"currentStringComposer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: this.stringComposer\n        });\n        Object.defineProperty(this, \"integer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"isNegativeInteger\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"bulkStringRemainingLength\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"arraysInProcess\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"initializeArray\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"arrayItemType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    reset() {\n        this.cursor = 0;\n        this.type = undefined;\n        this.bufferComposer.reset();\n        this.stringComposer.reset();\n        this.currentStringComposer = this.stringComposer;\n    }\n    write(chunk) {\n        while (this.cursor < chunk.length) {\n            if (!this.type) {\n                this.currentStringComposer = this.options.returnStringsAsBuffers() ?\n                    this.bufferComposer :\n                    this.stringComposer;\n                this.type = chunk[this.cursor];\n                if (++this.cursor >= chunk.length)\n                    break;\n            }\n            const reply = this.parseType(chunk, this.type);\n            if (reply === undefined)\n                break;\n            this.type = undefined;\n            this.options.onReply(reply);\n        }\n        this.cursor -= chunk.length;\n    }\n    parseType(chunk, type, arraysToKeep) {\n        switch (type) {\n            case Types.SIMPLE_STRING:\n                return this.parseSimpleString(chunk);\n            case Types.ERROR:\n                return this.parseError(chunk);\n            case Types.INTEGER:\n                return this.parseInteger(chunk);\n            case Types.BULK_STRING:\n                return this.parseBulkString(chunk);\n            case Types.ARRAY:\n                return this.parseArray(chunk, arraysToKeep);\n        }\n    }\n    compose(chunk, composer) {\n        for (let i = this.cursor; i < chunk.length; i++) {\n            if (chunk[i] === ASCII.CR) {\n                const reply = composer.end(chunk.subarray(this.cursor, i));\n                this.cursor = i + 2;\n                return reply;\n            }\n        }\n        const toWrite = chunk.subarray(this.cursor);\n        composer.write(toWrite);\n        this.cursor = chunk.length;\n    }\n    parseSimpleString(chunk) {\n        return this.compose(chunk, this.currentStringComposer);\n    }\n    parseError(chunk) {\n        const message = this.compose(chunk, this.stringComposer);\n        if (message !== undefined) {\n            return new errors_1.ErrorReply(message);\n        }\n    }\n    parseInteger(chunk) {\n        if (this.isNegativeInteger === undefined) {\n            this.isNegativeInteger = chunk[this.cursor] === ASCII.MINUS;\n            if (this.isNegativeInteger && ++this.cursor === chunk.length)\n                return;\n        }\n        do {\n            const byte = chunk[this.cursor];\n            if (byte === ASCII.CR) {\n                const integer = this.isNegativeInteger ? -this.integer : this.integer;\n                this.integer = 0;\n                this.isNegativeInteger = undefined;\n                this.cursor += 2;\n                return integer;\n            }\n            this.integer = this.integer * 10 + byte - ASCII.ZERO;\n        } while (++this.cursor < chunk.length);\n    }\n    parseBulkString(chunk) {\n        if (this.bulkStringRemainingLength === undefined) {\n            const length = this.parseInteger(chunk);\n            if (length === undefined)\n                return;\n            if (length === -1)\n                return null;\n            this.bulkStringRemainingLength = length;\n            if (this.cursor >= chunk.length)\n                return;\n        }\n        const end = this.cursor + this.bulkStringRemainingLength;\n        if (chunk.length >= end) {\n            const reply = this.currentStringComposer.end(chunk.subarray(this.cursor, end));\n            this.bulkStringRemainingLength = undefined;\n            this.cursor = end + 2;\n            return reply;\n        }\n        const toWrite = chunk.subarray(this.cursor);\n        this.currentStringComposer.write(toWrite);\n        this.bulkStringRemainingLength -= toWrite.length;\n        this.cursor = chunk.length;\n    }\n    parseArray(chunk, arraysToKeep = 0) {\n        if (this.initializeArray || this.arraysInProcess.length === arraysToKeep) {\n            const length = this.parseInteger(chunk);\n            if (length === undefined) {\n                this.initializeArray = true;\n                return undefined;\n            }\n            this.initializeArray = false;\n            this.arrayItemType = undefined;\n            if (length === -1) {\n                return this.returnArrayReply(null, arraysToKeep);\n            }\n            else if (length === 0) {\n                return this.returnArrayReply([], arraysToKeep);\n            }\n            this.arraysInProcess.push({\n                array: new Array(length),\n                pushCounter: 0\n            });\n        }\n        while (this.cursor < chunk.length) {\n            if (!this.arrayItemType) {\n                this.arrayItemType = chunk[this.cursor];\n                if (++this.cursor >= chunk.length)\n                    break;\n            }\n            const item = this.parseType(chunk, this.arrayItemType, arraysToKeep + 1);\n            if (item === undefined)\n                break;\n            this.arrayItemType = undefined;\n            const reply = this.pushArrayItem(item, arraysToKeep);\n            if (reply !== undefined)\n                return reply;\n        }\n    }\n    returnArrayReply(reply, arraysToKeep) {\n        if (this.arraysInProcess.length <= arraysToKeep)\n            return reply;\n        return this.pushArrayItem(reply, arraysToKeep);\n    }\n    pushArrayItem(item, arraysToKeep) {\n        const to = this.arraysInProcess[this.arraysInProcess.length - 1];\n        to.array[to.pushCounter] = item;\n        if (++to.pushCounter === to.array.length) {\n            return this.returnArrayReply(this.arraysInProcess.pop().array, arraysToKeep);\n        }\n    }\n}\nexports.default = RESP2Decoder;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,oBAAD,CAAxB,C,CACA;AACA;;;AACA,IAAIG,KAAJ;;AACA,CAAC,UAAUA,KAAV,EAAiB;EACdA,KAAK,CAACA,KAAK,CAAC,eAAD,CAAL,GAAyB,EAA1B,CAAL,GAAqC,eAArC;EACAA,KAAK,CAACA,KAAK,CAAC,OAAD,CAAL,GAAiB,EAAlB,CAAL,GAA6B,OAA7B;EACAA,KAAK,CAACA,KAAK,CAAC,SAAD,CAAL,GAAmB,EAApB,CAAL,GAA+B,SAA/B;EACAA,KAAK,CAACA,KAAK,CAAC,aAAD,CAAL,GAAuB,EAAxB,CAAL,GAAmC,aAAnC;EACAA,KAAK,CAACA,KAAK,CAAC,OAAD,CAAL,GAAiB,EAAlB,CAAL,GAA6B,OAA7B,CALc,CAKwB;AACzC,CAND,EAMGA,KAAK,KAAKA,KAAK,GAAG,EAAb,CANR;;AAOA,IAAIC,KAAJ;;AACA,CAAC,UAAUA,KAAV,EAAiB;EACdA,KAAK,CAACA,KAAK,CAAC,IAAD,CAAL,GAAc,EAAf,CAAL,GAA0B,IAA1B;EACAA,KAAK,CAACA,KAAK,CAAC,MAAD,CAAL,GAAgB,EAAjB,CAAL,GAA4B,MAA5B;EACAA,KAAK,CAACA,KAAK,CAAC,OAAD,CAAL,GAAiB,EAAlB,CAAL,GAA6B,OAA7B;AACH,CAJD,EAIGA,KAAK,KAAKA,KAAK,GAAG,EAAb,CAJR,E,CAKA;;;AACA,MAAMC,YAAN,CAAmB;EACfC,WAAW,CAACC,OAAD,EAAU;IACjBZ,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;MACnCY,UAAU,EAAE,IADuB;MAEnCC,YAAY,EAAE,IAFqB;MAGnCC,QAAQ,EAAE,IAHyB;MAInCZ,KAAK,EAAES;IAJ4B,CAAvC;IAMAZ,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;MAClCY,UAAU,EAAE,IADsB;MAElCC,YAAY,EAAE,IAFoB;MAGlCC,QAAQ,EAAE,IAHwB;MAIlCZ,KAAK,EAAE;IAJ2B,CAAtC;IAMAH,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,MAA5B,EAAoC;MAChCY,UAAU,EAAE,IADoB;MAEhCC,YAAY,EAAE,IAFkB;MAGhCC,QAAQ,EAAE,IAHsB;MAIhCZ,KAAK,EAAE,KAAK;IAJoB,CAApC;IAMAH,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,gBAA5B,EAA8C;MAC1CY,UAAU,EAAE,IAD8B;MAE1CC,YAAY,EAAE,IAF4B;MAG1CC,QAAQ,EAAE,IAHgC;MAI1CZ,KAAK,EAAE,IAAIG,QAAQ,CAACU,OAAb;IAJmC,CAA9C;IAMAhB,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,gBAA5B,EAA8C;MAC1CY,UAAU,EAAE,IAD8B;MAE1CC,YAAY,EAAE,IAF4B;MAG1CC,QAAQ,EAAE,IAHgC;MAI1CZ,KAAK,EAAE,IAAII,QAAQ,CAACS,OAAb;IAJmC,CAA9C;IAMAhB,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,uBAA5B,EAAqD;MACjDY,UAAU,EAAE,IADqC;MAEjDC,YAAY,EAAE,IAFmC;MAGjDC,QAAQ,EAAE,IAHuC;MAIjDZ,KAAK,EAAE,KAAKc;IAJqC,CAArD;IAMAjB,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;MACnCY,UAAU,EAAE,IADuB;MAEnCC,YAAY,EAAE,IAFqB;MAGnCC,QAAQ,EAAE,IAHyB;MAInCZ,KAAK,EAAE;IAJ4B,CAAvC;IAMAH,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,mBAA5B,EAAiD;MAC7CY,UAAU,EAAE,IADiC;MAE7CC,YAAY,EAAE,IAF+B;MAG7CC,QAAQ,EAAE,IAHmC;MAI7CZ,KAAK,EAAE,KAAK;IAJiC,CAAjD;IAMAH,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,2BAA5B,EAAyD;MACrDY,UAAU,EAAE,IADyC;MAErDC,YAAY,EAAE,IAFuC;MAGrDC,QAAQ,EAAE,IAH2C;MAIrDZ,KAAK,EAAE,KAAK;IAJyC,CAAzD;IAMAH,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,iBAA5B,EAA+C;MAC3CY,UAAU,EAAE,IAD+B;MAE3CC,YAAY,EAAE,IAF6B;MAG3CC,QAAQ,EAAE,IAHiC;MAI3CZ,KAAK,EAAE;IAJoC,CAA/C;IAMAH,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,iBAA5B,EAA+C;MAC3CY,UAAU,EAAE,IAD+B;MAE3CC,YAAY,EAAE,IAF6B;MAG3CC,QAAQ,EAAE,IAHiC;MAI3CZ,KAAK,EAAE;IAJoC,CAA/C;IAMAH,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,eAA5B,EAA6C;MACzCY,UAAU,EAAE,IAD6B;MAEzCC,YAAY,EAAE,IAF2B;MAGzCC,QAAQ,EAAE,IAH+B;MAIzCZ,KAAK,EAAE,KAAK;IAJ6B,CAA7C;EAMH;;EACDe,KAAK,GAAG;IACJ,KAAKC,MAAL,GAAc,CAAd;IACA,KAAKC,IAAL,GAAYC,SAAZ;IACA,KAAKC,cAAL,CAAoBJ,KAApB;IACA,KAAKD,cAAL,CAAoBC,KAApB;IACA,KAAKK,qBAAL,GAA6B,KAAKN,cAAlC;EACH;;EACDO,KAAK,CAACC,KAAD,EAAQ;IACT,OAAO,KAAKN,MAAL,GAAcM,KAAK,CAACC,MAA3B,EAAmC;MAC/B,IAAI,CAAC,KAAKN,IAAV,EAAgB;QACZ,KAAKG,qBAAL,GAA6B,KAAKX,OAAL,CAAae,sBAAb,KACzB,KAAKL,cADoB,GAEzB,KAAKL,cAFT;QAGA,KAAKG,IAAL,GAAYK,KAAK,CAAC,KAAKN,MAAN,CAAjB;QACA,IAAI,EAAE,KAAKA,MAAP,IAAiBM,KAAK,CAACC,MAA3B,EACI;MACP;;MACD,MAAME,KAAK,GAAG,KAAKC,SAAL,CAAeJ,KAAf,EAAsB,KAAKL,IAA3B,CAAd;MACA,IAAIQ,KAAK,KAAKP,SAAd,EACI;MACJ,KAAKD,IAAL,GAAYC,SAAZ;MACA,KAAKT,OAAL,CAAakB,OAAb,CAAqBF,KAArB;IACH;;IACD,KAAKT,MAAL,IAAeM,KAAK,CAACC,MAArB;EACH;;EACDG,SAAS,CAACJ,KAAD,EAAQL,IAAR,EAAcW,YAAd,EAA4B;IACjC,QAAQX,IAAR;MACI,KAAKZ,KAAK,CAACwB,aAAX;QACI,OAAO,KAAKC,iBAAL,CAAuBR,KAAvB,CAAP;;MACJ,KAAKjB,KAAK,CAAC0B,KAAX;QACI,OAAO,KAAKC,UAAL,CAAgBV,KAAhB,CAAP;;MACJ,KAAKjB,KAAK,CAAC4B,OAAX;QACI,OAAO,KAAKC,YAAL,CAAkBZ,KAAlB,CAAP;;MACJ,KAAKjB,KAAK,CAAC8B,WAAX;QACI,OAAO,KAAKC,eAAL,CAAqBd,KAArB,CAAP;;MACJ,KAAKjB,KAAK,CAACgC,KAAX;QACI,OAAO,KAAKC,UAAL,CAAgBhB,KAAhB,EAAuBM,YAAvB,CAAP;IAVR;EAYH;;EACDW,OAAO,CAACjB,KAAD,EAAQkB,QAAR,EAAkB;IACrB,KAAK,IAAIC,CAAC,GAAG,KAAKzB,MAAlB,EAA0ByB,CAAC,GAAGnB,KAAK,CAACC,MAApC,EAA4CkB,CAAC,EAA7C,EAAiD;MAC7C,IAAInB,KAAK,CAACmB,CAAD,CAAL,KAAanC,KAAK,CAACoC,EAAvB,EAA2B;QACvB,MAAMjB,KAAK,GAAGe,QAAQ,CAACG,GAAT,CAAarB,KAAK,CAACsB,QAAN,CAAe,KAAK5B,MAApB,EAA4ByB,CAA5B,CAAb,CAAd;QACA,KAAKzB,MAAL,GAAcyB,CAAC,GAAG,CAAlB;QACA,OAAOhB,KAAP;MACH;IACJ;;IACD,MAAMoB,OAAO,GAAGvB,KAAK,CAACsB,QAAN,CAAe,KAAK5B,MAApB,CAAhB;IACAwB,QAAQ,CAACnB,KAAT,CAAewB,OAAf;IACA,KAAK7B,MAAL,GAAcM,KAAK,CAACC,MAApB;EACH;;EACDO,iBAAiB,CAACR,KAAD,EAAQ;IACrB,OAAO,KAAKiB,OAAL,CAAajB,KAAb,EAAoB,KAAKF,qBAAzB,CAAP;EACH;;EACDY,UAAU,CAACV,KAAD,EAAQ;IACd,MAAMwB,OAAO,GAAG,KAAKP,OAAL,CAAajB,KAAb,EAAoB,KAAKR,cAAzB,CAAhB;;IACA,IAAIgC,OAAO,KAAK5B,SAAhB,EAA2B;MACvB,OAAO,IAAIjB,QAAQ,CAAC8C,UAAb,CAAwBD,OAAxB,CAAP;IACH;EACJ;;EACDZ,YAAY,CAACZ,KAAD,EAAQ;IAChB,IAAI,KAAK0B,iBAAL,KAA2B9B,SAA/B,EAA0C;MACtC,KAAK8B,iBAAL,GAAyB1B,KAAK,CAAC,KAAKN,MAAN,CAAL,KAAuBV,KAAK,CAAC2C,KAAtD;MACA,IAAI,KAAKD,iBAAL,IAA0B,EAAE,KAAKhC,MAAP,KAAkBM,KAAK,CAACC,MAAtD,EACI;IACP;;IACD,GAAG;MACC,MAAM2B,IAAI,GAAG5B,KAAK,CAAC,KAAKN,MAAN,CAAlB;;MACA,IAAIkC,IAAI,KAAK5C,KAAK,CAACoC,EAAnB,EAAuB;QACnB,MAAMS,OAAO,GAAG,KAAKH,iBAAL,GAAyB,CAAC,KAAKG,OAA/B,GAAyC,KAAKA,OAA9D;QACA,KAAKA,OAAL,GAAe,CAAf;QACA,KAAKH,iBAAL,GAAyB9B,SAAzB;QACA,KAAKF,MAAL,IAAe,CAAf;QACA,OAAOmC,OAAP;MACH;;MACD,KAAKA,OAAL,GAAe,KAAKA,OAAL,GAAe,EAAf,GAAoBD,IAApB,GAA2B5C,KAAK,CAAC8C,IAAhD;IACH,CAVD,QAUS,EAAE,KAAKpC,MAAP,GAAgBM,KAAK,CAACC,MAV/B;EAWH;;EACDa,eAAe,CAACd,KAAD,EAAQ;IACnB,IAAI,KAAK+B,yBAAL,KAAmCnC,SAAvC,EAAkD;MAC9C,MAAMK,MAAM,GAAG,KAAKW,YAAL,CAAkBZ,KAAlB,CAAf;MACA,IAAIC,MAAM,KAAKL,SAAf,EACI;MACJ,IAAIK,MAAM,KAAK,CAAC,CAAhB,EACI,OAAO,IAAP;MACJ,KAAK8B,yBAAL,GAAiC9B,MAAjC;MACA,IAAI,KAAKP,MAAL,IAAeM,KAAK,CAACC,MAAzB,EACI;IACP;;IACD,MAAMoB,GAAG,GAAG,KAAK3B,MAAL,GAAc,KAAKqC,yBAA/B;;IACA,IAAI/B,KAAK,CAACC,MAAN,IAAgBoB,GAApB,EAAyB;MACrB,MAAMlB,KAAK,GAAG,KAAKL,qBAAL,CAA2BuB,GAA3B,CAA+BrB,KAAK,CAACsB,QAAN,CAAe,KAAK5B,MAApB,EAA4B2B,GAA5B,CAA/B,CAAd;MACA,KAAKU,yBAAL,GAAiCnC,SAAjC;MACA,KAAKF,MAAL,GAAc2B,GAAG,GAAG,CAApB;MACA,OAAOlB,KAAP;IACH;;IACD,MAAMoB,OAAO,GAAGvB,KAAK,CAACsB,QAAN,CAAe,KAAK5B,MAApB,CAAhB;IACA,KAAKI,qBAAL,CAA2BC,KAA3B,CAAiCwB,OAAjC;IACA,KAAKQ,yBAAL,IAAkCR,OAAO,CAACtB,MAA1C;IACA,KAAKP,MAAL,GAAcM,KAAK,CAACC,MAApB;EACH;;EACDe,UAAU,CAAChB,KAAD,EAA0B;IAAA,IAAlBM,YAAkB,uEAAH,CAAG;;IAChC,IAAI,KAAK0B,eAAL,IAAwB,KAAKC,eAAL,CAAqBhC,MAArB,KAAgCK,YAA5D,EAA0E;MACtE,MAAML,MAAM,GAAG,KAAKW,YAAL,CAAkBZ,KAAlB,CAAf;;MACA,IAAIC,MAAM,KAAKL,SAAf,EAA0B;QACtB,KAAKoC,eAAL,GAAuB,IAAvB;QACA,OAAOpC,SAAP;MACH;;MACD,KAAKoC,eAAL,GAAuB,KAAvB;MACA,KAAKE,aAAL,GAAqBtC,SAArB;;MACA,IAAIK,MAAM,KAAK,CAAC,CAAhB,EAAmB;QACf,OAAO,KAAKkC,gBAAL,CAAsB,IAAtB,EAA4B7B,YAA5B,CAAP;MACH,CAFD,MAGK,IAAIL,MAAM,KAAK,CAAf,EAAkB;QACnB,OAAO,KAAKkC,gBAAL,CAAsB,EAAtB,EAA0B7B,YAA1B,CAAP;MACH;;MACD,KAAK2B,eAAL,CAAqBG,IAArB,CAA0B;QACtBC,KAAK,EAAE,IAAIC,KAAJ,CAAUrC,MAAV,CADe;QAEtBsC,WAAW,EAAE;MAFS,CAA1B;IAIH;;IACD,OAAO,KAAK7C,MAAL,GAAcM,KAAK,CAACC,MAA3B,EAAmC;MAC/B,IAAI,CAAC,KAAKiC,aAAV,EAAyB;QACrB,KAAKA,aAAL,GAAqBlC,KAAK,CAAC,KAAKN,MAAN,CAA1B;QACA,IAAI,EAAE,KAAKA,MAAP,IAAiBM,KAAK,CAACC,MAA3B,EACI;MACP;;MACD,MAAMuC,IAAI,GAAG,KAAKpC,SAAL,CAAeJ,KAAf,EAAsB,KAAKkC,aAA3B,EAA0C5B,YAAY,GAAG,CAAzD,CAAb;MACA,IAAIkC,IAAI,KAAK5C,SAAb,EACI;MACJ,KAAKsC,aAAL,GAAqBtC,SAArB;MACA,MAAMO,KAAK,GAAG,KAAKsC,aAAL,CAAmBD,IAAnB,EAAyBlC,YAAzB,CAAd;MACA,IAAIH,KAAK,KAAKP,SAAd,EACI,OAAOO,KAAP;IACP;EACJ;;EACDgC,gBAAgB,CAAChC,KAAD,EAAQG,YAAR,EAAsB;IAClC,IAAI,KAAK2B,eAAL,CAAqBhC,MAArB,IAA+BK,YAAnC,EACI,OAAOH,KAAP;IACJ,OAAO,KAAKsC,aAAL,CAAmBtC,KAAnB,EAA0BG,YAA1B,CAAP;EACH;;EACDmC,aAAa,CAACD,IAAD,EAAOlC,YAAP,EAAqB;IAC9B,MAAMoC,EAAE,GAAG,KAAKT,eAAL,CAAqB,KAAKA,eAAL,CAAqBhC,MAArB,GAA8B,CAAnD,CAAX;IACAyC,EAAE,CAACL,KAAH,CAASK,EAAE,CAACH,WAAZ,IAA2BC,IAA3B;;IACA,IAAI,EAAEE,EAAE,CAACH,WAAL,KAAqBG,EAAE,CAACL,KAAH,CAASpC,MAAlC,EAA0C;MACtC,OAAO,KAAKkC,gBAAL,CAAsB,KAAKF,eAAL,CAAqBU,GAArB,GAA2BN,KAAjD,EAAwD/B,YAAxD,CAAP;IACH;EACJ;;AA9Nc;;AAgOnB7B,OAAO,CAACc,OAAR,GAAkBN,YAAlB"},"metadata":{},"sourceType":"script"}